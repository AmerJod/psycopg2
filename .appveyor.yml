version : 2.x.{build}

clone_folder: C:\Project

environment:
    global:
        # MSVC Express 2008's setenv.cmd failes if /E:ON and /V:ON are not
        # enabled in the batch script interpreter
        #
        #      WITH_COMPILER: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_compiler.cmd"
        CMD_IN_ENV: cmd /E:ON /V:ON /C .\appveyor\run_with_env.cmd

    matrix:
        # For Python versions available on Appveyor, see
        # https://www.appveyor.com/docs/build-environment/
      - {PYVER: "27", PYTHON_ARCH: "32"}
      # TODO: disabled for first tests: re-enable
      # - {PYVER: "27", PYTHON_ARCH: "64"}
      # - {PYVER: "37", PYTHON_ARCH: "32"}
      # - {PYVER: "37", PYTHON_ARCH: "64"}
      # - {PYVER: "36", PYTHON_ARCH: "32"}
      # - {PYVER: "36", PYTHON_ARCH: "64"}
      # - {PYVER: "35", PYTHON_ARCH: "32"}
      # - {PYVER: "35", PYTHON_ARCH: "64"}
      # - {PYVER: "34", PYTHON_ARCH: "32"}
      # - {PYVER: "34", PYTHON_ARCH: "64"}

    OPENSSL_VERSION: "1_1_1b"
    POSTGRES_VERSION: "11_2"

    PSYCOPG2_TESTDB: psycopg2_test
    PSYCOPG2_TESTDB_USER: postgres
    PSYCOPG2_TESTDB_PASSWORD: Password12!
    PSYCOPG2_TESTDB_HOST: localhost
    PSYCOPG2_TESTDB_PORT: 5432

    PGUSER: postgres
    PGPASSWORD: Password12!

    # The python used in the build process, not the one packages are built for
    PYEXE: C:\Python36\python.exe

matrix:
    fast_finish: false

services:
    # Note: if you change this service also change the paths to match
    # (see where Program Files\Postgres\9.6 is used)
    - postgresql96

cache:
  # Rebuild cache if following file changes
  # (See the file to zap the cache manually)
  - C:\Others -> scripts\appveyor.cache_rebuild

# Script called before repo cloning
init:
    # TODO: move functionalities out of init to drop this fetch problem
    - curl -fsSL -o "C:\\appveyor.py" https://raw.githubusercontent.com/psycopg/psycopg2/%APPVEYOR_REPO_COMMIT%/scripts/appveyor.py
    - "%PYEXE% C:\\appveyor.py init"

    # TODO: exporting variables below to be dropped once all the steps are
    # moved to the appveyor.py script.

    # Set env variable according to the build environment
    - SET PYTHON=C:\Python%PYVER%
    - IF "%PYTHON_ARCH%"=="64" SET PYTHON=%PYTHON%-x64

      # Py 2.7 = VS Ver. 9.0  (VS 2008)
      # Py 3.4 = VS Ver. 10.0 (VS 2010)
      # Py 3.5, 3.6, 3.7 = VS Ver. 14.0 (VS 2015)
    - IF "%PYVER%"=="27" SET VS_VER=9.0
    - IF "%PYVER%"=="34" SET VS_VER=10.0
    - IF "%PYVER%"=="35" SET VS_VER=14.0
    - IF "%PYVER%"=="36" SET VS_VER=14.0
    - IF "%PYVER%"=="37" SET VS_VER=14.0

    - IF "%VS_VER%"=="10.0" IF "%PYTHON_ARCH%"=="64" SET DISTUTILS_USE_SDK=1

    # Set Python to the path
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;C:\Program Files\Git\mingw64\bin;%PATH%

    # Setup the compiler based upon version and architecture
    - ECHO Configuring Compiler
    - IF "%PYTHON_ARCH%"=="32" (CALL "C:\\Program Files (x86)\\Microsoft Visual Studio %VS_VER%\\VC\\vcvarsall.bat" x86)
    - IF "%PYTHON_ARCH%"=="64" (CALL "C:\\Program Files (x86)\\Microsoft Visual Studio %VS_VER%\\VC\\vcvarsall.bat" amd64)


# Repository gets cloned, Cache is restored
install:
    - "%PYEXE% C:\\appveyor.py install"

    # Setup directories for building PostgreSQL librarires
    - ECHO *******************************************************************
    - ECHO Preparing for building PostgreSQL libraries
    - ECHO *******************************************************************
    - SET PGTOP=%BASE_DIR%\postgresql
    - IF NOT EXIST %PGTOP%\include MKDIR %PGTOP%\include
    - IF NOT EXIST %PGTOP%\lib MKDIR %PGTOP%\lib
    - IF NOT EXIST %PGTOP%\bin MKDIR %PGTOP%\bin

    # Download PostgreSQL source
    - CD C:\Others
    - IF NOT EXIST postgres-REL_%POSTGRES_VERSION%.zip (
        curl -fsSL -o postgres-REL_%POSTGRES_VERSION%.zip https://github.com/postgres/postgres/archive/REL_%POSTGRES_VERSION%.zip
      )

    # Setup build config file (config.pl)
    # Hack the Mkvcbuild.pm file so we build the lib version of libpq
    # Build libpgport, libpgcommon, libpq
    # Install includes
    # Copy over built libraries
    # Prepare local include directory for building from
    # Build pg_config in place
    # Note patch for OpenSSL 1.1 configuration. See:
    # https://www.postgresql-archive.org/Compile-psql-9-6-with-SSL-Version-1-1-0-td6054118.html
    # NOTE: Cannot set and use the same variable inside an IF
    - SET PGBUILD=%BUILD_DIR%\postgres-REL_%POSTGRES_VERSION%
    - IF NOT EXIST %PGTOP%\lib\libpq.lib (
        CD %BUILD_DIR% &&
        7z x C:\Others\postgres-REL_%POSTGRES_VERSION%.zip &&
        CD postgres-REL_%POSTGRES_VERSION% &&
        patch -p1 < %APPVEYOR_BUILD_FOLDER%\scripts\win_openssl_11.patch &&
        CD src\tools\msvc &&
        ECHO $config-^>{ldap} = 0; > config.pl &&
        ECHO $config-^>{openssl} = "%OPENSSLTOP:\=\\%"; >> config.pl &&
        ECHO.>> config.pl &&
        ECHO 1;>> config.pl &&
        perl -pi.bak -e "s/'libpq', 'dll'/'libpq', 'lib'/g" Mkvcbuild.pm &&
        build libpgport &&
        build libpgcommon &&
        build libpq &&
        ECHO "" > %PGBUILD%\src\backend\parser\gram.h &&
        perl -pi.bak -e "s/qw\(Install\)/qw\(Install CopyIncludeFiles\)/g" Install.pm &&
        perl -MInstall=CopyIncludeFiles -e"chdir('../../..'); CopyIncludeFiles('%PGTOP%')" &&
        COPY %PGBUILD%\Release\libpgport\libpgport.lib %PGTOP%\lib &&
        COPY %PGBUILD%\Release\libpgcommon\libpgcommon.lib %PGTOP%\lib &&
        COPY %PGBUILD%\Release\libpq\libpq.lib %PGTOP%\lib &&
        XCOPY /Y /S %PGBUILD%\src\include\port\win32\* %PGBUILD%\src\include &&
        XCOPY /Y /S %PGBUILD%\src\include\port\win32_msvc\* %PGBUILD%\src\include &&
        CD %PGBUILD%\src\bin\pg_config &&
        cl pg_config.c /MT /nologo /I%PGBUILD%\src\include /link /LIBPATH:%PGTOP%\lib libpgcommon.lib libpgport.lib advapi32.lib /NODEFAULTLIB:libcmt.lib /OUT:%PGTOP%\bin\pg_config.exe &&
        CD %BASE_DIR% &&
        RMDIR /S /Q %PGBUILD%
      )

build: off

#before_build:

build_script:
    # Add PostgreSQL binaries to the path
    - PATH=C:\Program Files\PostgreSQL\9.6\bin\;%PATH%
    - CD C:\Project
    - "%PYTHON%\\python.exe setup.py build_ext --have-ssl --pg-config %PGTOP%\\bin\\pg_config.exe -l libpgcommon -l libpgport -L %OPENSSLTOP%\\lib -I %OPENSSLTOP%\\include"
    - "%PYTHON%\\python.exe setup.py build"
    - "%PYTHON%\\python.exe setup.py install"
    - RD /S /Q psycopg2.egg-info

#after_build:

before_test:
    # Create and setup PostgreSQL database for the tests
    - createdb %PSYCOPG2_TESTDB%
    - psql -d %PSYCOPG2_TESTDB% -c "CREATE EXTENSION HSTORE;"

test_script:
    # Print psycopg and libpq versions
    - "%PYTHON%\\python.exe -c \"import psycopg2; print(psycopg2.__version__)\""
    - "%PYTHON%\\python.exe -c \"import psycopg2; print(psycopg2.__libpq_version__)\""
    - "%PYTHON%\\python.exe -c \"import psycopg2; print(psycopg2.extensions.libpq_version())\""
    - "%PYTHON%\\python.exe -c \"import tests; tests.unittest.main(defaultTest='tests.test_suite')\" --verbose"


# vim: set ts=4 sts=4 sw=4:
